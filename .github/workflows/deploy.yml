name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    # gradle wrapper 파일에 실행 권한을 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Create application.properties file
    - name: Create application.properties
      run: |
        echo "spring.application.name=study-group" > src/main/resources/application.properties
        echo "kakao.apikey=815edb7e2bc243e280f527ca4de5117c" >> src/main/resources/application.properties
        echo "kakao.redirect-uri=http://localhost:8080/user/kakao/callback" >> src/main/resources/application.properties
        echo "jwt.secret.key=OssaD4FoPe7BreiqedEKuVmPXRbnvl24WCNUV7PIPmTpDZftVGC7Xrxd1UPxAw91YP8qlYK5lMlWwut44x0mg" >> src/main/resources/application.properties
        echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:3306/study" >> src/main/resources/application.properties
        echo "spring.datasource.username=${{ secrets.MYSQL_USERNAME }}" >> src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=create" >> src/main/resources/application.properties

    # Gradle 빌드 실행
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # 빌드된 JAR 파일을 아티팩트로 업로드
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: trelloServer
        path: build/libs/trelloServer-0.0.1-SNAPSHOT.jar

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: trelloServer
        path: build/libs/

    # EC2에 배포
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem

        # JAR 파일을 EC2로 복사
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/trelloServer-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/trelloServer.jar

        # 기존 Java 프로세스 종료 후 새로운 프로세스 실행
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USERNAME }}/trelloServer.jar > app.log 2>&1 &"

        rm -f private_key.pem
