name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create application.properties
      run: |
        mkdir -p src/main/resources
        echo "spring.application.name=study-group" > src/main/resources/application.properties
        echo "kakao.apikey=815edb7e2bc243e280f527ca4de5117c" >> src/main/resources/application.properties
        echo "kakao.redirect-uri=http://localhost:8080/user/kakao/callback" >> src/main/resources/application.properties
        echo "jwt.secret.key=OssaD4FoPe7BreiqedEKuVmPXRbnvl24WCNUV7PIPmTpDZftVGC7Xrxd1UPxAw91YP8qlYK5lMlWwut44x0mg" >> src/main/resources/application.properties
        echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:3306/study" >> src/main/resources/application.properties
        echo "spring.datasource.username=${{ secrets.MYSQL_USERNAME }}" >> src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.properties

    - name: 테스트 및 빌드하기
      run: ./gradlew clean build

    - name: 빌드된 파일 이름 변경하기
      run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
        
    - name: SCP로 EC2에 빌드된 파일 전송하기
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소
        username: ${{ secrets.EC2_USERNAME }}  # EC2 사용자 이름
        key: ${{ secrets.EC2_SSH_KEY }}  # EC2 비공개 키
        source: project.jar  # 빌드된 JAR 파일 경로
        target: /home/ubuntu/study-group/tobe  # EC2 상의 배포될 폴더

    - name: SSH로 EC2에 접속하기
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script_stop: true
        script: |
          # 기존 서버 중지 및 새 JAR 파일 실행
          rm -rf /home/ubuntu/study-group/current
          mkdir /home/ubuntu/study-group/current
          mv /home/ubuntu/study-group/tobe/project.jar /home/ubuntu/study-group/current/project.jar
          cd /home/ubuntu/study-group/current
          sudo fuser -k -n tcp 8080 || true  # 포트 8080에 바인딩된 기존 프로세스 종료
          nohup java -jar project.jar > ./output.log 2>&1 &  # 새 JAR 파일 실행
          rm -rf /home/ubuntu/study-group/tobe  # 불필요한 폴더 삭제
